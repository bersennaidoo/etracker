// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package pgstore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createDefaultSetForExerciseStmt, err = db.PrepareContext(ctx, createDefaultSetForExercise); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDefaultSetForExercise: %w", err)
	}
	if q.createSetForExerciseStmt, err = db.PrepareContext(ctx, createSetForExercise); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSetForExercise: %w", err)
	}
	if q.createUserDefaultExerciseStmt, err = db.PrepareContext(ctx, createUserDefaultExercise); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserDefaultExercise: %w", err)
	}
	if q.createUserExerciseStmt, err = db.PrepareContext(ctx, createUserExercise); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserExercise: %w", err)
	}
	if q.createUserImageStmt, err = db.PrepareContext(ctx, createUserImage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserImage: %w", err)
	}
	if q.createUserWorkoutStmt, err = db.PrepareContext(ctx, createUserWorkout); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserWorkout: %w", err)
	}
	if q.createUsersStmt, err = db.PrepareContext(ctx, createUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUsers: %w", err)
	}
	if q.deleteUserExerciseStmt, err = db.PrepareContext(ctx, deleteUserExercise); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserExercise: %w", err)
	}
	if q.deleteUserImageStmt, err = db.PrepareContext(ctx, deleteUserImage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserImage: %w", err)
	}
	if q.deleteUserWorkoutsStmt, err = db.PrepareContext(ctx, deleteUserWorkouts); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserWorkouts: %w", err)
	}
	if q.deleteUsersStmt, err = db.PrepareContext(ctx, deleteUsers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUsers: %w", err)
	}
	if q.deleteWorkoutByIDForUserStmt, err = db.PrepareContext(ctx, deleteWorkoutByIDForUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkoutByIDForUser: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByNameStmt, err = db.PrepareContext(ctx, getUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByName: %w", err)
	}
	if q.getUserImageStmt, err = db.PrepareContext(ctx, getUserImage); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserImage: %w", err)
	}
	if q.getWorkoutsForUserIDStmt, err = db.PrepareContext(ctx, getWorkoutsForUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkoutsForUserID: %w", err)
	}
	if q.listImagesStmt, err = db.PrepareContext(ctx, listImages); err != nil {
		return nil, fmt.Errorf("error preparing query ListImages: %w", err)
	}
	if q.listUserExercisesStmt, err = db.PrepareContext(ctx, listUserExercises); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserExercises: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateSetStmt, err = db.PrepareContext(ctx, updateSet); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSet: %w", err)
	}
	if q.upsertUserImageStmt, err = db.PrepareContext(ctx, upsertUserImage); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertUserImage: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createDefaultSetForExerciseStmt != nil {
		if cerr := q.createDefaultSetForExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDefaultSetForExerciseStmt: %w", cerr)
		}
	}
	if q.createSetForExerciseStmt != nil {
		if cerr := q.createSetForExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSetForExerciseStmt: %w", cerr)
		}
	}
	if q.createUserDefaultExerciseStmt != nil {
		if cerr := q.createUserDefaultExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserDefaultExerciseStmt: %w", cerr)
		}
	}
	if q.createUserExerciseStmt != nil {
		if cerr := q.createUserExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserExerciseStmt: %w", cerr)
		}
	}
	if q.createUserImageStmt != nil {
		if cerr := q.createUserImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserImageStmt: %w", cerr)
		}
	}
	if q.createUserWorkoutStmt != nil {
		if cerr := q.createUserWorkoutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserWorkoutStmt: %w", cerr)
		}
	}
	if q.createUsersStmt != nil {
		if cerr := q.createUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUsersStmt: %w", cerr)
		}
	}
	if q.deleteUserExerciseStmt != nil {
		if cerr := q.deleteUserExerciseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserExerciseStmt: %w", cerr)
		}
	}
	if q.deleteUserImageStmt != nil {
		if cerr := q.deleteUserImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserImageStmt: %w", cerr)
		}
	}
	if q.deleteUserWorkoutsStmt != nil {
		if cerr := q.deleteUserWorkoutsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserWorkoutsStmt: %w", cerr)
		}
	}
	if q.deleteUsersStmt != nil {
		if cerr := q.deleteUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUsersStmt: %w", cerr)
		}
	}
	if q.deleteWorkoutByIDForUserStmt != nil {
		if cerr := q.deleteWorkoutByIDForUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkoutByIDForUserStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByNameStmt != nil {
		if cerr := q.getUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByNameStmt: %w", cerr)
		}
	}
	if q.getUserImageStmt != nil {
		if cerr := q.getUserImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserImageStmt: %w", cerr)
		}
	}
	if q.getWorkoutsForUserIDStmt != nil {
		if cerr := q.getWorkoutsForUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkoutsForUserIDStmt: %w", cerr)
		}
	}
	if q.listImagesStmt != nil {
		if cerr := q.listImagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listImagesStmt: %w", cerr)
		}
	}
	if q.listUserExercisesStmt != nil {
		if cerr := q.listUserExercisesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserExercisesStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateSetStmt != nil {
		if cerr := q.updateSetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSetStmt: %w", cerr)
		}
	}
	if q.upsertUserImageStmt != nil {
		if cerr := q.upsertUserImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertUserImageStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	createDefaultSetForExerciseStmt *sql.Stmt
	createSetForExerciseStmt        *sql.Stmt
	createUserDefaultExerciseStmt   *sql.Stmt
	createUserExerciseStmt          *sql.Stmt
	createUserImageStmt             *sql.Stmt
	createUserWorkoutStmt           *sql.Stmt
	createUsersStmt                 *sql.Stmt
	deleteUserExerciseStmt          *sql.Stmt
	deleteUserImageStmt             *sql.Stmt
	deleteUserWorkoutsStmt          *sql.Stmt
	deleteUsersStmt                 *sql.Stmt
	deleteWorkoutByIDForUserStmt    *sql.Stmt
	getUserStmt                     *sql.Stmt
	getUserByNameStmt               *sql.Stmt
	getUserImageStmt                *sql.Stmt
	getWorkoutsForUserIDStmt        *sql.Stmt
	listImagesStmt                  *sql.Stmt
	listUserExercisesStmt           *sql.Stmt
	listUsersStmt                   *sql.Stmt
	updateSetStmt                   *sql.Stmt
	upsertUserImageStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		createDefaultSetForExerciseStmt: q.createDefaultSetForExerciseStmt,
		createSetForExerciseStmt:        q.createSetForExerciseStmt,
		createUserDefaultExerciseStmt:   q.createUserDefaultExerciseStmt,
		createUserExerciseStmt:          q.createUserExerciseStmt,
		createUserImageStmt:             q.createUserImageStmt,
		createUserWorkoutStmt:           q.createUserWorkoutStmt,
		createUsersStmt:                 q.createUsersStmt,
		deleteUserExerciseStmt:          q.deleteUserExerciseStmt,
		deleteUserImageStmt:             q.deleteUserImageStmt,
		deleteUserWorkoutsStmt:          q.deleteUserWorkoutsStmt,
		deleteUsersStmt:                 q.deleteUsersStmt,
		deleteWorkoutByIDForUserStmt:    q.deleteWorkoutByIDForUserStmt,
		getUserStmt:                     q.getUserStmt,
		getUserByNameStmt:               q.getUserByNameStmt,
		getUserImageStmt:                q.getUserImageStmt,
		getWorkoutsForUserIDStmt:        q.getWorkoutsForUserIDStmt,
		listImagesStmt:                  q.listImagesStmt,
		listUserExercisesStmt:           q.listUserExercisesStmt,
		listUsersStmt:                   q.listUsersStmt,
		updateSetStmt:                   q.updateSetStmt,
		upsertUserImageStmt:             q.upsertUserImageStmt,
	}
}
